#!/bin/bash
# 2012-09-30 will - heavily modified to use a package location in the user's
# home directory
#
# 2009-04-09 tyler - use previously built packages as an apt source
# http://blog.edseek.com/~jasonb/articles/pbuilder_backports/pbuilderbuild.html#pbuilderhook

# See: https://stackoverflow.com/questions/59895/how-to-get-the-source-directory-of-a-bash-script-from-within-the-script-itself
# Note: you can't refactor this out: its at the top of every script so the scripts can find their includes.
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
SCRIPT_DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"

function log() {
  echo "$*" 1>&2
}

function fatal() {
  echo "$*" 1>&2
  exit 1
}

echo Calling "$0"

: "${DIST:=$(lsb_release --short --codename)}"
: "${ARCH:=$(dpkg --print-architecture)}"

echo "Running apt-ftparchive for $DIST-$ARCH"

# Run the name remap code
source "$PBUILDER_HOOKS/common-name-remapping"

NAME="$DIST-$ARCH"
#BUILDRESULT="/var/cache/pbuilder/$NAME/result"

# Sanity check!
if [ ! -d "$BUILDRESULT" ]; then
    echo Could not find "$BUILDRESULT"
    echo Aborting operation.
    exit 1
fi

# get the local repository location (see .pbuilderrc)
# (we read in from a file here since we can't rely on knowing the username)
PBUILDER_REPO=$(cat $BUILDRESULT/.local_repository_location)
PBUILDER_GPG="$PBUILDER_REPO/gpg"

# move built packages to localrepo
if [ -n "$(ls "$BUILDRESULT")" ]; then
    if ! mv -t "$PBUILDER_REPO/$NAME" "$BUILDRESULT"/* ; then
        fatal "Failed to move build packages to local repository"
    fi
fi

# chown the files back to the owning user
owning_user="$(stat -c '%u:%g' "$PBUILDER_REPO/$NAME")"
while read -r output; do
    if ! chown "$owning_user" "$output"; then
        fatal "Failed to change the ownership of built packages back to user: $output"
    fi
done < <(find "$PBUILDER_REPO/$NAME" -mindepth 1 -print)

echo "Local Repository Location is: $PBUILDER_REPO/$NAME"

# create apt archive of previously built packages
pushd "$PBUILDER_REPO/$NAME" || fatal "Could not change dir to $PBUILDER_REPO/$NAME"

if ! apt-ftparchive packages -c "$PBUILDER_REPO/$NAME/apt-ftparchive.conf" . > "$PBUILDER_REPO/$NAME/Packages"; then
    fatal "Packages file generation failed"
fi

if ! apt-ftparchive sources -c "$PBUILDER_REPO/$NAME/apt-ftparchive.conf" . > "$PBUILDER_REPO/$NAME/Sources"; then
    fatal "Packages file generation failed"
fi

if ! apt-ftparchive release -c "$PBUILDER_REPO/$NAME/apt-ftparchive.conf" . > "$PBUILDER_REPO/$NAME/Release"; then
    fatal "Packages file generation failed"
fi

log "Signing Release File"
if ! gpg --homedir "$PBUILDER_GPG" --yes --no-options --no-default-keyring \
    --keyring "$PBUILDER_REPO/pbuilder-public.gpg" \
    --trustdb-name "$PBUILDER_REPO/trustdb.gpg" -abs \
    -o "$PBUILDER_REPO/$NAME/Release.gpg" \
    "$PBUILDER_REPO/$NAME/Release" ; then
    log "Failed to sign the new Release file: $PBUILDER_REPO/$NAME/Release"
fi

popd || fatal "Could not restore original directory"

log "Executing apt update with new package "
apt update

exit 0
